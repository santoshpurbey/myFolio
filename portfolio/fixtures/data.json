[
{
  "fields": {
    "description": "<p>Wordpress Photo Album</p>\r\n",
    "end_date": "2013-10-01",
    "url": "http://be-there.gr",
    "image": "portfolio/port_bethere_fp2-1024x624.png",
    "layouts": 8,
    "skills": [
      5,
      2,
      1,
      6,
      4
    ],
    "job": "Web Development",
    "client": "Olibia Alevizopoulou",
    "short_description": "Online Photo Album",
    "slug": "bethere",
    "categories": 4,
    "name": "Bethere"
  },
  "model": "portfolio.project",
  "pk": 3
},
{
  "fields": {
    "description": "<p>Django Web Application for accounting services and balanvesheet hosting</p>\r\n",
    "end_date": "2015-01-01",
    "url": "http://e-logistiko.eu/",
    "image": "portfolio/e-logistiko.png",
    "layouts": 9,
    "skills": [
      5,
      7,
      2,
      8,
      6
    ],
    "job": "Django App",
    "client": "e-logistiko Accountin Services",
    "short_description": "Accounting Services",
    "slug": "e-logistiko",
    "categories": 5,
    "name": "e-logistiko "
  },
  "model": "portfolio.project",
  "pk": 4
},
{
  "fields": {
    "description": "<p>A dynamic and custom designed website using Django Web Framework</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://climaristotehniki.gr/",
    "image": "portfolio/clima_TTgdHP9.png",
    "layouts": 9,
    "skills": [
      5,
      7,
      2,
      8,
      6
    ],
    "job": "Full Stack Development",
    "client": "Theodoros Remoundos",
    "short_description": "Company Website",
    "slug": "clima-aristotehniki",
    "categories": 5,
    "name": "Clima Aristotehniki"
  },
  "model": "portfolio.project",
  "pk": 5
},
{
  "fields": {
    "description": "<p>This&nbsp; blog is builded using Django Web Framiwork and Bootstrap 3 for its totaly custom design</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://theamateuravant-garde.com/",
    "image": "portfolio/avant.png",
    "layouts": 8,
    "skills": [
      5,
      11,
      7,
      9,
      2,
      8,
      6,
      10
    ],
    "job": "Full Stack Development",
    "client": "Elena Chatziathanasiou",
    "short_description": "Blog",
    "slug": "amature-avant-garde",
    "categories": 2,
    "name": "The Amature Avant Garde"
  },
  "model": "portfolio.project",
  "pk": 6
},
{
  "fields": {
    "description": "<p>Demo</p>\r\n",
    "end_date": "2015-01-01",
    "url": "",
    "image": "portfolio/ngsocial_V7VXttv.png",
    "layouts": 8,
    "skills": [
      13,
      12,
      9,
      6
    ],
    "job": "Front End Development",
    "client": "Demo Application",
    "short_description": "Angular Application",
    "slug": "ng-social-app",
    "categories": 3,
    "name": "NG Social App"
  },
  "model": "portfolio.project",
  "pk": 7
},
{
  "fields": {
    "description": "<p>A demo contact listin and storing&nbsp; Application using AngularJS and Firebase.</p>\r\n",
    "end_date": "2015-12-05",
    "url": "",
    "image": "portfolio/mycontacts-app.png",
    "layouts": 8,
    "skills": [
      13,
      11,
      12,
      9,
      6,
      10
    ],
    "job": "Front End Development",
    "client": "Demo Application",
    "short_description": "Angular App",
    "slug": "my-contacts",
    "categories": 3,
    "name": "My Contacts"
  },
  "model": "portfolio.project",
  "pk": 8
},
{
  "fields": {
    "description": "<p>Online Booking System</p>\r\n",
    "end_date": "2014-06-01",
    "url": "http://travelscouters.gr",
    "image": "portfolio/travel_k022r4N.png",
    "layouts": 9,
    "skills": [
      5,
      11,
      9,
      2,
      1,
      6,
      4
    ],
    "job": "Full Stack",
    "client": "Travelscouters Team",
    "short_description": "Online Booking System",
    "slug": "travelscouters",
    "categories": 4,
    "name": "Travelscouters"
  },
  "model": "portfolio.project",
  "pk": 9
},
{
  "fields": {
    "description": "<p>Interrior Architect Personal Portfolio build with Django</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://echinarch.com",
    "image": "portfolio/echinarch.png",
    "layouts": 2,
    "skills": [
      5,
      11,
      7,
      9,
      2,
      8,
      6,
      10
    ],
    "job": "Full Stack",
    "client": "Elena Chatziathanasiou",
    "short_description": "Protfolio",
    "slug": "echinarch",
    "categories": 2,
    "name": "Echinarch "
  },
  "model": "portfolio.project",
  "pk": 10
},
{
  "fields": {
    "name": "PHP",
    "slug": "php"
  },
  "model": "portfolio.skill",
  "pk": 1
},
{
  "fields": {
    "name": "MySQL",
    "slug": "mysql"
  },
  "model": "portfolio.skill",
  "pk": 2
},
{
  "fields": {
    "name": "CmsMS",
    "slug": "cmsms"
  },
  "model": "portfolio.skill",
  "pk": 3
},
{
  "fields": {
    "name": "Wordpress",
    "slug": "wp"
  },
  "model": "portfolio.skill",
  "pk": 4
},
{
  "fields": {
    "name": "Bootstrap 3",
    "slug": "bootstrap3"
  },
  "model": "portfolio.skill",
  "pk": 5
},
{
  "fields": {
    "name": "Responsive",
    "slug": "responsive"
  },
  "model": "portfolio.skill",
  "pk": 6
},
{
  "fields": {
    "name": "Django",
    "slug": "django"
  },
  "model": "portfolio.skill",
  "pk": 7
},
{
  "fields": {
    "name": "Python",
    "slug": "python"
  },
  "model": "portfolio.skill",
  "pk": 8
},
{
  "fields": {
    "name": "HTML 5",
    "slug": "html5"
  },
  "model": "portfolio.skill",
  "pk": 9
},
{
  "fields": {
    "name": "SASS",
    "slug": "sass"
  },
  "model": "portfolio.skill",
  "pk": 10
},
{
  "fields": {
    "name": "CSS 3",
    "slug": "css3"
  },
  "model": "portfolio.skill",
  "pk": 11
},
{
  "fields": {
    "name": "Foundation Web Framework",
    "slug": "foundation"
  },
  "model": "portfolio.skill",
  "pk": 12
},
{
  "fields": {
    "name": "Angular JS",
    "slug": "angularjs"
  },
  "model": "portfolio.skill",
  "pk": 13
},
{
  "fields": {
    "name": "Version Control",
    "slug": "version-control"
  },
  "model": "portfolio.skill",
  "pk": 14
},
{
  "fields": {
    "name": "In Progress",
    "slug": "inprogress"
  },
  "model": "portfolio.category",
  "pk": 2
},
{
  "fields": {
    "name": "AngularJs",
    "slug": "angularjs"
  },
  "model": "portfolio.category",
  "pk": 3
},
{
  "fields": {
    "name": "Other",
    "slug": "other"
  },
  "model": "portfolio.category",
  "pk": 4
},
{
  "fields": {
    "name": "Django",
    "slug": "django"
  },
  "model": "portfolio.category",
  "pk": 5
},
{
  "fields": {
    "name": "Django Practices",
    "slug": "django-practices"
  },
  "model": "portfolio.category",
  "pk": 6
},
{
  "fields": {
    "name": "DevOps",
    "slug": "devops"
  },
  "model": "portfolio.category",
  "pk": 7
},
{
  "fields": {
    "name": "git",
    "slug": "git"
  },
  "model": "portfolio.category",
  "pk": 8
},
{
  "fields": {
    "name": "gallery",
    "slug": "gallery"
  },
  "model": "portfolio.postlayout",
  "pk": 1
},
{
  "fields": {
    "name": "large",
    "slug": "large"
  },
  "model": "portfolio.postlayout",
  "pk": 2
},
{
  "fields": {
    "name": "link",
    "slug": "link"
  },
  "model": "portfolio.postlayout",
  "pk": 3
},
{
  "fields": {
    "name": "quote",
    "slug": "quote"
  },
  "model": "portfolio.postlayout",
  "pk": 4
},
{
  "fields": {
    "name": "standard",
    "slug": "standard"
  },
  "model": "portfolio.postlayout",
  "pk": 5
},
{
  "fields": {
    "name": "video",
    "slug": "video"
  },
  "model": "portfolio.postlayout",
  "pk": 6
},
{
  "fields": {
    "name": "noimage",
    "slug": "noimage"
  },
  "model": "portfolio.postlayout",
  "pk": 7
},
{
  "fields": {
    "name": "standardright",
    "slug": "standardright"
  },
  "model": "portfolio.postlayout",
  "pk": 8
},
{
  "fields": {
    "name": "standardleft",
    "slug": "standardleft"
  },
  "model": "portfolio.postlayout",
  "pk": 9
},
{
  "fields": {
    "body": "<h3>Writing custom template tags</h3>\r\n\r\n<p>Django custom template tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. The most common place to specify custom template tags is inside you Django app. The app should contain a <code>templatetags</code>&nbsp; directory (at the same level as models.py, views.py etc). If it does&#39;nt already exists you can create it manual.</p>\r\n\r\n<p>Your app layout should look like this:</p>\r\n\r\n<pre>\r\n<code>\r\nappname/\r\n&nbsp; &nbsp; __init__.py\r\n&nbsp; &nbsp; models.py\r\n&nbsp; &nbsp;&nbsp;views.py\r\n&nbsp; &nbsp; templatetags/\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;__init__.py\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my_tags.py\r\n</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><small>*Don&rsquo;t forget the __init__.py file to ensure the directory is treated as a Python package.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">In the example above we &#39;re going to write&nbsp;an&nbsp;<code>inclusion_tag</code></div>\r\n\r\n<p>This type is a common type o template tags that displays some data by rendering another template. In the example above we will write an <code>inclusion_tag </code>that helps us to render one part of the main&nbsp;menu within the <code>base</code> template.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><var>We are going to use the <code>inclusion_tag</code> library:</var></p>\r\n\r\n<pre>\r\n<code>django.template.Library.inclusion_tag</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><var>Then we can write our script within the my_tags.py file. The code looks like this:</var></p>\r\n\r\n<pre>\r\n<code>\r\nfrom django import template\r\nfrom portfolio.models import Page\r\n\r\nregister = template.Library()\r\n\r\n@register.inclusion_tag(&#39;page/pages_menu.html&#39;)\r\n</code>\r\n</pre>\r\n\r\n<p>Now let&#39;s explain the above code line by line</p>\r\n\r\n<pre>\r\n<code>\r\nfrom django import template\r\nregister = template.Library()\r\n</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To be a valid tag library, our script must contain a module-leve variable named register, an instance o the template.Library&nbsp;in witch all tags and filters are register in Django.</p>\r\n\r\n<pre>\r\n<code>\r\nfrom portfolio.models import Page\r\n</code>\r\n</pre>\r\n\r\n<p>Now this one is simple to explain.&nbsp;In this example we need to display data from the Page model so we need to import the Page model</p>\r\n\r\n<pre>\r\n<code>\r\n@register.inclusion_tag(&#39;page/pages_menu.html&#39;)\r\n</code>\r\n</pre>\r\n\r\n<p>Next we need to register the tamplate and at the end of our script comes our function, in this example our function is typical to a <code>view.py </code>function.</p>\r\n\r\n<pre>\r\n<code>\r\ndef show_pages_menu(pages_menu):\r\n&nbsp; &nbsp; pages_menu = Page.objects.all()\r\n&nbsp; &nbsp; return { &#39;pages_menu&#39; : pages_menu }\r\n</code>\r\n</pre>\r\n\r\n<p>At this point we&#39;we just finished with the banckend an all we need is to show the results in our template:</p>\r\n\r\n<pre>\r\n<code>{% show_pages_menu pages_menu %}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This was just an example of using Custom Teamplate Tags in Django, you can visit <a href=\"https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/#inclusion-tags\">Django&#39;s Documentaion</a> page to find out more variations of using &nbsp;template tags.&nbsp;</p>\r\n\r\n<hr />\r\n<p><small>Sources:<a href=\"https://docs.djangoproject.com/en/1.9/howto/custom-template-tags\"> Django Project</a></small></p>\r\n",
    "category": 6,
    "updated": "2016-10-26T12:13:51Z",
    "author": 1,
    "skills": [
      7
    ],
    "image": "blog/custom-template-tags.png",
    "title": "Create custom Template Tags in Django",
    "publish": "2016-06-03T16:08:23Z",
    "created": "2016-06-03T16:08:58Z",
    "layouts": 7,
    "status": "published",
    "short_description": "Django custom template tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. Here is a laconic overview of how we create a custom tag in Django",
    "slug": "create-custom-template-tags-django"
  },
  "model": "portfolio.post",
  "pk": 1
},
{
  "fields": {
    "body": "<p><samp><strong>Django&nbsp;is a&nbsp;very&nbsp;popular, efficient, adjustable and dynamically evolving framework for web applications. When Django initially gained popularity the recommended server setup for running applications was based around Apache with mod_wsgi. This&nbsp;days&nbsp;the art of running Django advanced and the configuration is more productive and resilient, but also&nbsp;more complex including&nbsp;such tools as Nginx, Gunicorn and Supservisor.</strong></samp></p>\r\n\r\n<p><strong><samp>While I was trying to deploy my first Django application to a production server I realized that it was not such a piece of cake especially for someone who is not an IT specialist . So I had to do an intensive research to collect information in pieces and the make a puzzle of steps witch I need to follow to complete the process of deploying.</samp></strong></p>\r\n\r\n<p><strong><samp>In this article I am going to share with you how to combine all of&nbsp;this components&nbsp;into a Django server running on Linux.<br />\r\nRequirements<br />\r\nA sever available with root privileges<br />\r\nDNS configured to point at the server&#39;s IP<br />\r\nI am using a server running Ubuntu 14.04 so everything should also work on any Debian-based Distribution.<br />\r\nSystem update<br />\r\nLet&#39;s&nbsp;get&nbsp;started&nbsp;by making sure our system is up to da</samp></strong>te</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get update</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get upgrade</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>MySql</h2>\r\n\r\n<p><strong><samp>MySql is a popular database management system used for web and server applications</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>sudo apt-get install mysql-server</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><samp>During the installation&nbsp;process you&nbsp;will prompted to choose and set a password for&nbsp;MySql root user. Choose a strong one and keep it in a safe place for future&nbsp;referencies.</samp></strong></p>\r\n\r\n<h2>Application System User</h2>\r\n\r\n<p><strong><samp>Web applications&nbsp;can become compromised even though Django has a pretty good security track record. As a good practice for security is to run the application as&nbsp;system user&nbsp;with limited privileges. If the application has limited access to resources on your server,&nbsp;potential damage can also be limited.</samp></strong></p>\r\n\r\n<p><br />\r\n<strong><samp>Create a system&nbsp;user&nbsp;for your application,&nbsp;myappuser&nbsp;and assign it to a group called&nbsp;webapps</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo groupadd --system webapps</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo useradd --system --gid webapps --shell /bin/bash &ndash;home /www/myapp_django myappuser</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Install virtualenv and create an environment for your app</h2>\r\n\r\n<p><strong><samp>Virtualenv&nbsp;is a powerful tool&nbsp;which&nbsp;allows you to create separate Python environments in your system. We need&nbsp;virtual environment&nbsp;to run application with different sets of requirements concurrently.Virtualenv&nbsp;is easy to install on Ubuntu:</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get install python-virtualenv</code></div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3 style=\"color:#aaa; font-style:italic\"><strong>Create and activate an environment for your application</strong></h3>\r\n\r\n<p><strong><samp>I usually keep all may web application in a</samp>&nbsp; <code>/www/</code> <samp>directory.&nbsp; Create a diractory to store you application like </samp><code>/www/myapp_django</code> <samp>and change the owner of this diractory to your application user <code>myappuser</code>.</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo mkdir -p /www/myapp_django</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo chown myapp_user /www/myapp_django</code></div>\r\n\r\n<p><strong>Then as the application user myapp_user create a virtual Python environment in the application directory /www/myapp_django:</strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo su - myapp_user</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>myapp_user@ghost:~$ cd /www/myapp_django</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>myapp_user@ghost:~$ virtualenv myappenv</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">\r\n<pre>\r\n<code>New python executable in myapp_django/bin/python\r\nInstalling distribute..............done.\r\nInstalling pip.....................done.</code></pre>\r\n\r\n<p><code>myapp_user@ghost:~$ source myappenv/bin/activate</code></p>\r\n\r\n<p><code>(myappenv)myapp_user@ghost:~$ </code></p>\r\n</div>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong><samp>Your environment is now activated and you can proceed to install your application requirements.</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ pip install django</code>\r\n\r\n<pre>\r\n<code>Downloading/unpacking django\r\n(...)\r\nInstalling collected packages: django\r\n(...)\r\nSuccessfully installed django\r\nCleaning up...</code></pre>\r\n</div>\r\n\r\n<p><strong><samp>&nbsp;Your environment with Django should now be ready to use. Go ahead and create a Django project</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ django-admin.py startproject myproject</code></div>\r\n\r\n<p><strong><samp>Test your new project by running the development server</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ ./manage.py runserver example.com:8000 </code>\r\n\r\n<pre>\r\n<code>Validating models...\r\n\r\n0 errors found\r\nJune 09, 2013 - 06:12:00\r\nDjango version 1.5.1, using settings &#39;hello.settings&#39;\r\nDevelopment server is running at http://example.com:8000/\r\nQuit the server with CONTROL-C.\r\n</code></pre>\r\n</div>\r\n\r\n<p><strong><samp>&nbsp;You should now be able to access your development server from <a href=\"http://example.com:8000\">http://example.com:8000</a></samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"color:#aaa; font-style:italic\"><strong>Allowing other users to have write access to your application directory</strong></h3>\r\n\r\n<p><strong><samp>Your application is properly configured to run as user </samp><code>myapp_user, who owns the entire application directory. If you want reqular users to have write access to application files you can set properly the group owner and give the group write permitions.</code></strong></p>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h1><strong>Gunicorn</strong></h1>\r\n\r\n<p><strong>In production we&#39;re going to use a dedicated application server called <a href=\"http://gunicorn.org\">Gunicorn</a></strong></p>\r\n\r\n<p><strong>First you&#39;ll have to install Gunicorn in your applications virtualenv:</strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$</code><code> pip install gunicorn</code>\r\n\r\n<pre>\r\n<code>Downloading/unpacking gunicorn\r\n  Downloading gunicorn-0.17.4.tar.gz (372Kb): 372Kb downloaded\r\n  Running setup.py egg_info for package gunicorn\r\n\r\nInstalling collected packages: gunicorn\r\n  Running setup.py install for gunicorn\r\n\r\n    Installing gunicorn_paster script to /webapps/hello_django/bin\r\n    Installing gunicorn script to /webapps/hello_django/bin\r\n    Installing gunicorn_django script to /webapps/hello_django/bin\r\nSuccessfully installed gunicorn\r\nCleaning up...\r\n</code></pre>\r\n</div>\r\n\r\n<p><br />\r\n<strong><samp>Now that you have installed Gunicorn you can test wether it can server your Django application by running the following command<code>:</code></samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ gunicorn myproject.wsgi:application --bind example.com:8001</code><code> </code></div>\r\n\r\n<p><strong><samp>You should now be able to access the Gunicorn server from <a href=\"http://example.com:8001\">http://example.com:8001</a> . I intentionally changed port 8000 to 8001 to force your browser to establish a new connection.</samp></strong></p>\r\n\r\n<p><strong><samp>Gunicorn is installed and ready to serve your app. Let&rsquo;s set some configuration options to make it more useful. I like to set a number of parameters, so let&rsquo;s put them all into a small BASH script, which I save as <code>bin/gunicorn_start</code></samp></strong></p>\r\n\r\n<h2 style=\"font-style:italic\"><span class=\"marker\">gunicorn_start img</span></h2>\r\n\r\n<p><strong><samp>Set the executable bit on the <code>gunicorn_start</code> script:</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ sudo chmod u+x bin/gunicorn_start</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 7,
    "updated": "2016-10-19T10:41:36Z",
    "author": 1,
    "skills": [],
    "image": "blog/pyter_FhvW4LO.png",
    "title": "Setting up Django with ngnx, gunicorn, virtualenv, supervisor and MySql ",
    "publish": "2016-06-05T08:00:56Z",
    "created": "2016-06-05T08:01:14Z",
    "layouts": 5,
    "status": "published",
    "short_description": "Hooray! It's time for deploy - Part One",
    "slug": "setting-django-ngnx-gunicorn-virtualenv-supoervisor-and-mysql"
  },
  "model": "portfolio.post",
  "pk": 2
},
{
  "fields": {
    "body": "<p>Nginx makes a great server for your Gunicorn-powered Django applications. In this article I will demonstrate how you can run multiple Django applications on the same Nginx server, hosting sites on two different domains. Each application will be set up in its own Virtualenv and each will be owned by and run as a different user to limit consequences of a potential security breach.</p>\r\n\r\n<h3>Prerequisites</h3>\r\n\r\n<p>This artcle is a continuation of <a href=\"http://kkabardi.me/post/2/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">a previous article on setting up Django with Nginx and Gunicorn</a>. You should start by following instructions in <a href=\"http://kkabardi.me/post/2/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">that article</a> and prepare a server with the following components:</p>\r\n\r\n<p>Nginx</p>\r\n\r\n<p>PostgreSQL</p>\r\n\r\n<p>Virtualenv</p>\r\n\r\n<p>Supervisor</p>\r\n\r\n<p>Our goal in this article will be to create two applications, one called Hello and one called Goodbye. The former will be served under the address <a href=\"http://hello.test\">http://hello.test</a> and the latter <a href=\"http://goodbye.test\">http://goodbye.test</a></p>\r\n\r\n<h3>Create a virtual environment for each app</h3>\r\n\r\n<p>In order to keep your apps independent, each will run in its own virtual environment. Create an environment for each application using the <code>virtualenv</code> command. In each environment install Django, Gunicorn, the application itself and its other dependencies. Follow steps described in <a href=\"http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">my previous article</a> for each app.</p>\r\n\r\n<p>Let&rsquo;s say that for our <code>hello</code> and <code>goodbye</code> applications we would create environments in <code>/webapps/hello_django</code> and <code>/webapps/goodbye_django</code> respectively. We would get a directory structure containing the following entries:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>\r\n/webapps/\r\n\u251c\u2500\u2500 hello_django                &lt;= virtualenv for the application Hello\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 bin\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 activate\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn            &lt;= Hello app&#39;s gunicorn\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn_start      &lt;= Hello app&#39;s gunicorn start script\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u2514\u2500\u2500 python\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 hello                   &lt;= Hello app&#39;s Django project directory\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u2514\u2500\u2500 hello\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp;     \u251c\u2500\u2500 settings.py     &lt;= hello.settings\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp;     \u2514\u2500\u2500 wsgi.py         &lt;= hello.wsgi\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 logs                    &lt;= Hello app&#39;s logs will be saved here\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 media\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 run                     &lt;= Gunicorn&#39;s socket file will be placed here\r\n\u2502&nbsp;&nbsp; \u2514\u2500\u2500 static\r\n\u2514\u2500\u2500 goodbye_django              &lt;= analogous virtualenv for the app Goodbye\r\n    \u251c\u2500\u2500 bin\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 activate\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn_start\r\n    \u2502&nbsp;&nbsp; \u2514\u2500\u2500 python\r\n    \u251c\u2500\u2500 goodbye\r\n    \u2502&nbsp;&nbsp; \u2514\u2500\u2500 goodbye\r\n    \u2502&nbsp;&nbsp;     \u251c\u2500\u2500 settings.py\r\n    \u2502&nbsp;&nbsp;     \u2514\u2500\u2500 wsgi.py\r\n    \u251c\u2500\u2500 logs\r\n    \u251c\u2500\u2500 media\r\n    \u251c\u2500\u2500 run\r\n    \u2514\u2500\u2500 static\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create system accounts for the webapps</h3>\r\n\r\n<p>Even though Django has a pretty good <a href=\"http://django.readthedocs.org/en/latest/releases/security.html\" title=\"Archive of Django security issues\">security track record</a>, web applications can become compromised. In order to make running multiple applications safer we&rsquo;ll create a separate system user account for each application. The apps will run on our system with the privileges of those special users. Even if one application became compromised, an attacker would only be able to take over the part of your system available to the hacked application.</p>\r\n\r\n<p>Create system users named <code>hello</code> and <code>goodbye</code> and assign them to a system group called <code>webapps</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>\r\n$ sudo groupadd --system webapps\r\n\r\n$ sudo useradd --system --gid webapps --home /webapps/hello_django hello\r\n\r\n$ sudo useradd --system --gid webapps --home /webapps/goodbye_django goodbye \r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now change the owner of files in each application&rsquo;s folder. I like to assign the group <code>users</code> as the owner, because that allows regular users of the server to access and modify parts of the application which are group-writable. This is optional.</p>\r\n\r\n<pre>\r\n<code>\r\n$ sudo chown -R hello:users /webapps/hello_django\r\n$ sudo chown -R goodbye:users /webapps/goodbye_django\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Gunicorn start scripts</h3>\r\n\r\n<p>For each application create a simple shell script based on my <a href=\"https://gist.github.com/postrational/5747293#file-gunicorn_start-bash\" title=\"gunicorn_start.bash\">gunicorn_start</a> template. The scripts differ only in the values of variables which they set.</p>\r\n\r\n<p>For the Hello app, set the following values in <code>/webapps/hello_django/bin/gunicorn_start</code>:</p>\r\n\r\n<p>/webapps/hello_django/bin/gunicorn_start</p>\r\n\r\n<pre>\r\n<code>\r\n(...)\r\n1 NAME=&quot;hello_app&quot;                                  # Name of the application\r\n2 DJANGODIR=/webapps/hello_django/hello             # Django project directory\r\n3 SOCKFILE=/webapps/hello_django/run/gunicorn.sock  # we will communicte using this unix socket\r\n4 USER=hello                                        # the user to run as\r\n5 GROUP=webapps                                     # the group to run as\r\n6 NUM_WORKERS=3                                     # how many worker processes should Gunicorn spawn\r\n7 DJANGO_SETTINGS_MODULE=hello.settings             # which settings file should Django use\r\n8 DJANGO_WSGI_MODULE=hello.wsgi                     # WSGI module name\r\n(...)\r\n</code></pre>\r\n\r\n<p>And for the Goodbye app by analogy:</p>\r\n\r\n<p>/webapps/goodbye_django/bin/gunicorn_start</p>\r\n\r\n<pre>\r\n<code>\r\n(...)\r\n# Name of the application 2 DJANGODIR=/webapps/goodbye_django/goodbye # Django project directory 3 SOCKFILE=/webapps/goodbye_django/run/gunicorn.sock # we will communicte using this unix socket 4 USER=goodbye # the user to run as 5 GROUP=webapps # the group to run as 6 NUM_WORKERS=3 # how many worker processes should Gunicorn spawn 7 DJANGO_SETTINGS_MODULE=goodbye.settings # which settings file should Django use 8 DJANGO_WSGI_MODULE=goodbye.wsgi # WSGI module name \r\n(...) \r\n</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Supervisor configuration files and start the apps</h3>\r\n\r\n<p>Next, create a Supervisor configuration for each application. Add a file for each app to the <code>/etc/supervisor/conf.d</code> directory.</p>\r\n\r\n<p>One for Hello:</p>\r\n\r\n<p>/etc/supervisor/conf.d/hello.conf</p>\r\n\r\n<pre>\r\n<code>\r\n[program:hello]\r\ncommand = /webapps/hello_django/bin/gunicorn_start                    ; Command to start app\r\nuser = hello                                                          ; User to run as\r\nstdout_logfile = /webapps/hello_django/logs/gunicorn_supervisor.log   ; Where to write log messages\r\nredirect_stderr = true                                                ; Save stderr in the same log\r\n</code></pre>\r\n\r\n<p>And one for Goodbye:</p>\r\n\r\n<p>/etc/supervisor/conf.d/goodbye.conf</p>\r\n\r\n<pre>\r\n<code>\r\n[program:goodbye]\r\ncommand = /webapps/goodbye_django/bin/gunicorn_start                    ; Command to start app\r\nuser = goodbye                                                          ; User to run as\r\nstdout_logfile = /webapps/goodbye_django/logs/gunicorn_supervisor.log   ; Where to write log messages\r\nredirect_stderr = true                                                  ; Save stderr in the same log\r\n</code></pre>\r\n\r\n<p>Reread the configuration files and update Supervisor to start the apps:</p>\r\n\r\n<pre>\r\n<code>\r\n$ sudo supervisorctl reread\r\n$ sudo supervisorctl update\r\n</code></pre>\r\n\r\n<p>You can also start them manually, if you prefer:</p>\r\n\r\n<pre>\r\n<code>\r\n$ sudo supervisorctl start hello\r\n$ sudo supervisorctl start goodbye\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Nginx virtual servers</h3>\r\n\r\n<p>Finally we can create virtual server configurations for each app based on <a href=\"https://gist.github.com/postrational/5747293#file-hello-nginxconf\" title=\"Nginx virtual server configuration template\">this template</a>. These will be stored in <code>/etc/nginx/sites-available</code> and then activated by links in <code>/etc/nginx/sites-enabled</code>.</p>\r\n\r\n<p>/etc/nginx/sites-available/hello</p>\r\n\r\n<pre>\r\n<code>\r\nupstream hello_app_server {\r\n  server unix:/webapps/hello_django/run/gunicorn.sock fail_timeout=0;\r\n}\r\n\r\nserver {\r\n    listen   80;\r\n    server_name hello.test;\r\n\r\n    client_max_body_size 4G;\r\n\r\n    access_log /webapps/hello_django/logs/nginx-access.log;\r\n    error_log /webapps/hello_django/logs/nginx-error.log;\r\n\r\n    location /static/ {\r\n        alias   /webapps/hello_django/static/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias   /webapps/hello_django/media/;\r\n    }\r\n\r\n    location / {\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        if (!-f $request_filename) {\r\n            proxy_pass http://hello_app_server;\r\n            break;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>/etc/nginx/sites-available/goodbye</p>\r\n\r\n<pre>\r\n<code>\r\nupstream goodbye_app_server {\r\n  server unix:/webapps/goodbye_django/run/gunicorn.sock fail_timeout=0;\r\n}\r\n\r\nserver {\r\n    listen   80;\r\n    server_name goodbye.test;\r\n\r\n    client_max_body_size 4G;\r\n\r\n    access_log /webapps/goodbye_django/logs/nginx-access.log;\r\n    error_log /webapps/goodbye_django/logs/nginx-error.log;\r\n\r\n    location /static/ {\r\n        alias   /webapps/goodbye_django/static/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias   /webapps/goodbye_django/media/;\r\n    }\r\n\r\n    location / {\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        if (!-f $request_filename) {\r\n            proxy_pass http://goodbye_app_server;\r\n            break;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>Enable the virtual servers and restart Nginx:</p>\r\n\r\n<pre>\r\n<code>\r\n$ sudo ln -s /etc/nginx/sites-available/hello /etc/nginx/sites-enabled/hello\r\n$ sudo ln -s /etc/nginx/sites-available/goodbye /etc/nginx/sites-enabled/goodbye\r\n$ sudo service nginx restart\r\n</code>\r\n</pre>\r\n\r\n<h3>Test the virtual servers</h3>\r\n\r\n<p>Now let&rsquo;s point each domain to our server for testing purposes. Making actual changes to the Domain Name System is usually among the final steps when working in production, performed after all tests are completed. For testing you can simulate the DNS changes by adding an entry to the <code>/etc/hosts</code> file of a computer from which you will be connecting to your server (your laptop for example).</p>\r\n\r\n<p>Say you want to serve Django applications under the domains <code>hello.test</code> and <code>goodbye.test</code> from a server with the IP address of <code>10.10.10.200</code>. You can simulate the appropriate DNS entries locally on your PC by putting the following line into your <code>/etc/hosts</code> file. On Windows the file is <a href=\"http://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system\" title=\"hosts (file) Location in the file system - Wikipedia\">conveniently hidden</a> in <code>%SystemRoot%\\system32\\drivers\\etc\\hosts</code>.</p>\r\n\r\n<p><code>/etc/hosts</code></p>\r\n\r\n<pre>\r\n<code>\r\n(...)\r\n10.10.10.200    hello.test goodbye.test\r\n</code>\r\n</pre>\r\n\r\n<p>You can now navigate to each domain from your PC to test that each app on the server is working correctly:</p>\r\n\r\n<p><a href=\"http://hello.test\">http://hello.test</a></p>\r\n\r\n<p><a href=\"http://goodbye.test\">http://goodbye.test</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 7,
    "updated": "2016-10-20T07:29:13Z",
    "author": 1,
    "skills": [],
    "image": "blog/pyter.png",
    "title": "Serving multiple Django applications with Nginx and Gunicorn",
    "publish": "2016-07-13T07:18:21Z",
    "created": "2016-07-13T07:18:39Z",
    "layouts": 5,
    "status": "published",
    "short_description": "Hooray! It's time for deploy - Part Two",
    "slug": "serving-multiple-django-applications-nginx-and-gunicorn"
  },
  "model": "portfolio.post",
  "pk": 3
},
{
  "fields": {
    "body": "<h2><samp>Here is today&#39;s obscure error message and its solutions.</samp></h2>\r\n\r\n<p><samp>Say you are working on a Django project, using its development web server, and you get this exception when you try to load a page in the browser:</samp></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><tt>AttributeError: &#39;str&#39; object has no attribute &#39;resolve&#39;</tt></div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>1. Missed&nbsp; &#39;pattern&#39; keyword&#39;:</h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = (&#39;&#39;,<br />\r\n(r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n# ...</div>\r\n\r\n<p>this should be changed to:</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = patterns(&#39;&#39;,<br />\r\n(r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n# ...</div>\r\n\r\n<p>Note that in Django 1.8+, it&#39;s better to use a list of regexes instead of <code>patterns</code>.</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = [<br />\r\n&nbsp;&nbsp;&nbsp; (r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n&nbsp;&nbsp;&nbsp; ...<br />\r\n]</div>\r\n\r\n<p><samp>See the difference? In the first one, I&#39;m incorrectly assigning urlpatterns to be a tuple. In the second, I&#39;m correctly using the <code>django.conf.urls.defaults.patterns</code> function.</samp></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>2. Miessed</samp> comma in some tuple, like:</h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^hello/$&#39; &#39;views.whatever&#39;)&nbsp;</div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>3. Commented out some url()s using triple-quotes</samp></h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><br />\r\nurlpatterns = patterns(&#39;&#39;,<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^admin/&#39;, include(admin.site.urls)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^cart/&#39;, include(&#39;cart.urls&#39;, namespace=&#39;cart&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^payment/&#39;, include(&#39;payment.urls&#39;, namespace=&#39;payment&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^orders/&#39;, include(&#39;orders.urls&#39;, namespace=&#39;orders&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^paypal/&#39;, include(&#39;paypal.standard.ipn.urls&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^&#39;, include(&#39;shop.urls&#39;, namespace=&#39;shop&#39;)),<br />\r\n&quot;&quot;&quot;<br />\r\n&nbsp;&nbsp;&nbsp; start REST urls<br />\r\n&nbsp;&nbsp;&nbsp; url(&#39;^.*$&#39;, IndexView.as_view(), name=&#39;index&#39;),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^api/v1/&#39;, include(router.urls)),<br />\r\n&nbsp;&nbsp;&nbsp; end REST urls<br />\r\n&quot;&quot;&quot;</div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>4. Carelessly leaved closing bracket in the wrong place:</samp></h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^(?P\\d{4})/$&#39;, &#39;archive_year&#39;, entry_info_dict), &#39;coltrane_entry_archive_year&#39;,</div>\r\n\r\n<p><samp>instead of:</samp></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^(?P\\d{4})/$&#39;, &#39;archive_year&#39;, entry_info_dict, &#39;coltrane_entry_archive_year&#39;),</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><samp>5.<code> </code><code>ROOT_URLCONF</code> set to be a list</samp></h3>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 5,
    "updated": "2016-09-27T11:37:40Z",
    "author": 1,
    "skills": [],
    "image": "blog/django-1040x585.png",
    "title": "Django: AttributeError: 'str' object has no attribute 'resolve'",
    "publish": "2016-07-20T08:35:02Z",
    "created": "2016-07-20T08:35:31Z",
    "layouts": 3,
    "status": "published",
    "short_description": "Say you are working on a Django project, using its development web server, and you get this exception when you try to load a page in the browser:",
    "slug": "django-attributeerror-str-object-has-no-attribute-resolve"
  },
  "model": "portfolio.post",
  "pk": 4
},
{
  "fields": {
    "body": "<p>First things first! Get a log of your latest commits using:</p>\r\n\r\n<pre>\r\n<code>\r\n$ git log --oneline\r\n</code>\r\n</pre>\r\n\r\n<p>You will see something like this in your terminal:</p>\r\n\r\n<pre>\r\n<code>\r\nf46cab5 Add default layout for Home #6&nbsp; - Add statics for default layout\r\n17c75ce Add notes for an selenium issue and its solution #3\r\n3ae1ca8 Refactor home page view to use a template #5\r\na3a8b68 Add portfolio home view #5\r\n981d904 Add UT for home_page view #4\r\n...\r\n</code>\r\n</pre>\r\n\r\n<p>Hm, this is an one line log for your projects commit history. That is because we used the option <code>--oneline</code> when we asked git to log for us.</p>\r\n\r\n<p>Now we have our log we can rebase:</p>\r\n\r\n<pre>\r\n<code>\r\n$ git rebase --interactive commit_hash^\r\n</code>\r\n</pre>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>each ^ indicates how many commits you want to edit, if it&#39;s only one (the commit hash that you specified), then you just add one ^</code></div>\r\n\r\n<p>Use the editor of your choice&nbsp; - Vi, Nano etc - you change the words<code> pick</code> to<code> reword</code></p>\r\n\r\n<p>For the commits you want to change, save and quit. Then git will prompt you with each commit that you marked as reword so you can change the commit message.</p>\r\n\r\n<p>Writing the following command i am asking to rebase the last 3 commits starting from the comming witch has the speicified hash:</p>\r\n\r\n<pre>\r\n<code>\r\n$ git rebase --interactive f46cab5^^^\r\n</code>\r\n</pre>\r\n\r\n<pre>\r\n<code>\r\nGNU nano 2.2.6 File: ...ilerplate/.git/rebase-merge/git-rebase-todo \r\npick 3ae1ca8 Refactor home page view to use a template #5\r\npick 17c75ce Add notes for an selenium issue and its solution #3\r\npick f46cab5 Add default layout for Home #6&nbsp; - Add statics for default layout -$\r\n\r\n# Rebase a3a8b68..f46cab5 onto a3a8b68\r\n#\r\n# Commands:\r\n#&nbsp; p, pick = use commit\r\n#&nbsp; r, reword = use commit, but edit the commit message\r\n#&nbsp; e, edit = use commit, but stop for amending\r\n#&nbsp; s, squash = use commit, but meld into previous commit\r\n#&nbsp; f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message\r\n#&nbsp; x, exec = run command (the rest of the line) using shell\r\n#\r\n# These lines can be re-ordered; they are executed from top to bottom.\r\n#\r\n# If you remove a line here THAT COMMIT WILL BE LOST.\r\n#\r\n# However, if you remove everything, the rebase will be aborted.\r\n#\r\n# Note that empty commits are commented out\r\n</code>\r\n</pre>\r\n\r\n<p>Each commit message you have to save and quit to go to the next commit message</p>\r\n\r\n<p>EDIT: to navigate in vim you use j to go up, k to go down, h to go left, and l to go right( all this in NORMAL mode, press ESC to go to NORMAL mode ). To edit a text, press i so that you enter the INSERT mode, where you insert text. Press ESC to go back to NORMAL mode :)</p>\r\n\r\n<p>Now if you wont to push your commits in Github you should use the <code>--force </code>parameter:</p>\r\n\r\n<pre>\r\n<code>\r\n$ git push --force\r\n</code>\r\n</pre>\r\n\r\n<p>What <code>$ git push --force</code> does is overwrite the remotes commits with your local commits.</p>\r\n",
    "category": 8,
    "updated": "2016-10-26T13:11:27Z",
    "author": 1,
    "skills": [
      14
    ],
    "image": "blog/git-rebase_sbWT1aJ.png",
    "title": "How to modify a specified commit in git",
    "publish": "2016-09-15T12:04:24Z",
    "created": "2016-09-15T12:14:36Z",
    "layouts": 5,
    "status": "published",
    "short_description": "Git Tools - Rewriting History",
    "slug": "how-modify-specified-commit-git"
  },
  "model": "portfolio.post",
  "pk": 5
},
{
  "fields": {
    "body": "<p>During my time&nbsp;of working with Django I&rsquo;ve found and learned things that I had no idea existed when I got started, and hopefully by reading this text you can get a head start in improving your Django development.</p>\r\n\r\n<h2>Import User Model With get_user_model()</h2>\r\n\r\n<p>Since Django 1.5 release developers can now customize the user model of Django, and plenty of developers do. When you develop an app to Django that needs to use the User model, don&rsquo;t just simply import it with a normal Python import statement such as:</p>\r\n\r\n<p>from profile.models import CustomUser</p>\r\n\r\n<pre>\r\n<code>\r\nfrom profile.models import CustomUser\r\n </code></pre>\r\n\r\n<p>If you do this, when you want to reuse your app in another project that might have another custom user class, your code will break.</p>\r\n\r\n<p>The solution is to use <a href=\"https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#django.contrib.auth.get_user_model\" target=\"_blank\">get_user_model()</a>&nbsp;which returns the current active user model. If there&rsquo;s no custom user model set, it will return Django&rsquo;s default user model. Else it will return the custom model.</p>\r\n\r\n<p>Example of how to use it to create a new user:</p>\r\n\r\n<pre>\r\n<code>\r\nfrom django.contrib.auth import get_user_model user = get_user_model().objects.create_user( email=&quot;sample@sample.com&quot;, )\r\n\r\nfrom django.contrib.auth import get_user_model\r\nuser = get_user_model().objects.create_user(\r\nemail=&quot;sample@sample.com&quot;,\r\n</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Use Amazon S3 With Django Static/Media Files</h2>\r\n\r\n<p>Don&rsquo;t host your static and media files on the same server as your web server. The cost for hosting the files on a separate media server such as Amazon S3 is nothing and it just makes it so much easier to manage, migrate and update your project.</p>\r\n\r\n<p>The problem is that to make Minify, Gzip Compression, Browser Cache and AWS S3 play along with each other can be a nightmare, and it took some time for myself to get it all working. Luckily you don&rsquo;t have to figure it out by yourself, just read my guide of <a href=\"http://weblind.com/django/how-to-setup-dango-aws-s3/\" target=\"_blank\">How to setup Amazon S3, Gzip and Minify with Django</a>.</p>\r\n\r\n<h2>Avoid Circular Import Errors with ForeignKey</h2>\r\n\r\n<p>A very common issue that&nbsp;you might run into when your project gets larger and larger, and you get more and more models with foreign keys that&nbsp;connect to each other, is a circular import error. This happens when you have an import statement that imports something from File B to File A, and then you have another import statement that import something from File A to File B. They both depend on each other.</p>\r\n\r\n<p>How to solve this? Don&rsquo;t import things! Use strings in your ForeignKey.</p>\r\n\r\n<p>Wrong way to do:</p>\r\n\r\n<pre>\r\n<code>\r\nfrom myapp.models import MyModel\r\nclass FooModel(models.Model):\r\n&nbsp;&nbsp;&nbsp;&nbsp;myfield = models.ForeignKey(MyModel)\r\n</code></pre>\r\n\r\n<p>Right way to do:</p>\r\n\r\n<pre>\r\n<code>\r\nclass FooModel(models.Model): \r\n&nbsp;&nbsp;&nbsp;&nbsp;myfield = models.ForeignKey(&quot;myapp.MyModel&quot;)\r\nclass FooModel(models.Model):</code></pre>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;myfield = models.ForeignKey(&quot;myapp.MyModel&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Development settings.py File</h2>\r\n\r\n<p>When I figured out how to handle separate settings.py file for my live production environment, and my development environment, it just made my life so much easier. I&rsquo;ve seen people do this in a ton of different ways. Everything from commenting and uncommenting settings depending on what environment they are using, to changing file names to activate the correct one, to doing imports inside the file.</p>\r\n\r\n<p>The correct way to do it? You can specify what settings.py file to use when you call your &ldquo;runserver&rdquo; command.&nbsp;I almost did a face palm when I found out that the solution was this simple and brilliant.</p>\r\n\r\n<pre>\r\n<code>\r\npython manage.py runserver --settings=myapp.dev_settings\r\n</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Use Django&rsquo;s Signals as Hooks</h2>\r\n\r\n<p><a href=\"https://docs.djangoproject.com/es/1.9/topics/signals/\" target=\"_blank\">Django explains&nbsp;signals</a> pretty clear:</p>\r\n\r\n<p>Django includes a &ldquo;signal dispatcher&rdquo; which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain <em>senders</em> to notify a set of <em>receivers</em> that some action has taken place. They&rsquo;re especially useful when many pieces of code may be interested in the same events.</p>\r\n\r\n<p>So let&rsquo;s say that you want to build a feature where new users automatically gets added to your newsletter list on MailChimp as soon as they join your site. How would you do this? With Signals!</p>\r\n\r\n<p>When your user model create a new entry (a new user registers) you can listen to this signal with a receiver, and then run your API call when a new user is created. Let&rsquo;s see how we would do this:</p>\r\n\r\n<p>Python</p>\r\n\r\n<pre>\r\n<code>\r\n@receiver(models.signals.post_save) def send_alert(sender, instance, **kwargs): \r\n&nbsp;&nbsp;if sender is MyUserModel and kwargs[&#39;created&#39;]:\r\n&nbsp;&nbsp;&nbsp;&nbsp;email = instance.email # Get the email of the user created.\r\n# Make your API call here!\r\n</code>\r\n</pre>\r\n\r\n<p>So what we are doing is:</p>\r\n\r\n<p>We use the <code>@receiver</code> decorator to tell Django what we&rsquo;re listening to. In this case we are listening to &ldquo;post_save&rdquo;, meaning the signal that is send after a model is saved.</p>\r\n\r\n<p>We catch arguments &ldquo;sender&rdquo; and &ldquo;instance&rdquo; in our function. This store the information from our signal.</p>\r\n\r\n<p>We make sure that the model that is being saved is &ldquo;MyUserModel&rdquo; (else our code would run on every model save, no matter what model it was) and that &lsquo;created&rsquo; is set in the kwargs, meaning that this is the first time the instance is saved, its not an update of a previous saved instance.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Do you have any great Django tips yourself that you&rsquo;ve learned throughout the years of working with Django? Please share it in the comments below and I&rsquo;ll include them in the post!</p>\r\n",
    "category": 6,
    "updated": "2016-10-20T12:09:43Z",
    "author": 1,
    "skills": [],
    "image": "blog/django_tips_TJ0FX9J.png",
    "title": "5 Productive Tips About Django Web Framework",
    "publish": "2016-09-30T08:54:00Z",
    "created": "2016-09-30T08:56:36Z",
    "layouts": 5,
    "status": "published",
    "short_description": "Improve your Django Development",
    "slug": "5-productive-tips-about-django-web-framework"
  },
  "model": "portfolio.post",
  "pk": 6
},
{
  "fields": {
    "body": "<p>I just stumpled upon an error while customizing the Admin in a new Django project where I first used Django 1.6:</p>\r\n\r\n<h2 style=\"font-style:italic\"><code>Database returned an invalid value in QuerySet.dates(). Are time zone definitions and pytz installed?</code></h2>\r\n\r\n<p>After using my favourite search engine to get an idea what this means and ensuring I had pytz installed, I didn&#39;t find anything which solved my problem.</p>\r\n\r\n<p>As the <a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#datetimes\">Django docs</a> say, one should install <a href=\"https://pypi.python.org/pypi/pytz/\">pytz</a> and ensure that the MySQL server has the time_zone tables loaded with data. So, actually on my MySQL server those tables were actually empty but on a Debian system it is enough to fill them with the script <a href=\"http://dev.mysql.com/doc/refman/5.5/en/mysql-tzinfo-to-sql.html\">mysql_tzinfo_to_sql</a> and pass <code>/usr/share/zoneinfo</code> to it. Then, I had many, many time_zone definitions in MySQL while I&#39;m basically only interested in UTC as this is what the server uses and also my application code.</p>\r\n\r\n<p>Still, the error persisted. After trying to find the root cause of this in Django DB code without success, I had a quick look at the MySQL server configuration and the global &quot;time_zone&quot; server variable was set to &quot;SYSTEM&quot; while I expected it to read &quot;UTC&quot;.</p>\r\n\r\n<p><code>SELECT @@time_zone;</code></p>\r\n\r\n<p>So, for a quick&#39;n&#39;dirty test, I added a time zone name mapping for SYSTEM referring to the UTC time zone and guess what: it worked!</p>\r\n\r\n<p><code>INSERT INTO `mysql`.`time_zone_name` VALUES (&#39;SYSTEM&#39;, &#39;588&#39;);</code></p>\r\n\r\n<p>Though this felt more like a workaround instead a clean solution. So, I changed my MySQL server configuration to set the time zone to UTC in general. To do this, I edited <code>/etc/mysql/my.cnf</code> and added the following line into the <code>mysqld</code> section:</p>\r\n\r\n<p><code>default-time-zone = &#39;UTC&#39;</code></p>\r\n\r\n<p>Then restarted my MySQL server and now it everything works and the problem is solved in the proper way.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>***********************************************************</p>\r\n\r\n<p>In Django 1.8 and python&nbsp; 3 just put in your settings</p>\r\n\r\n<p>after the timezone setting</p>\r\n\r\n<p><code>USE_TZ = False</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 7,
    "updated": "2016-10-20T15:35:03Z",
    "author": 1,
    "skills": [],
    "image": "blog/s-l225.jpg",
    "title": "Django, MySQL, Time zones and how to fix it ",
    "publish": "2016-10-11T13:16:11Z",
    "created": "2016-10-11T13:17:21Z",
    "layouts": 7,
    "status": "draft",
    "short_description": "I just stumpled upon an error while customizing the Admin in a new Django project where I first used Django 1.8",
    "slug": "django-mysql-time-zones-and-how-fix-it"
  },
  "model": "portfolio.post",
  "pk": 7
},
{
  "fields": {
    "body": "<p>How would you describe <strong>Python</strong>? If someone asks me &ndash; few words will come up in my mind immediately. Those are : <strong>easy to understand, harder to master, multipurpose</strong> and <strong>powerful</strong>.<br />\r\nBut what is it capable of? What are its strengths and weaknesses? Why do people choose it over/in addition to other programming languages? Let&rsquo;s try to figure that out.</p>\r\n\r\n<h2>Hello, Python</h2>\r\n\r\n<p>I remember the day when my kid came back home after his first day in school. He asked me just one question : &ldquo;Dad, why didn&rsquo;t you tell me that it&rsquo;s going to be a 10 years prison?&rdquo;. It seems like Python was designed with a great will to avoid such questions. It has simple syntax and handles a lot of complexity for you, allows beginners to focus on learning programming concepts and not have to worry about too many details. It also helps you to save your time. Let&rsquo;s take the most common first program &ldquo;Hello, World&rdquo; code in different programming languages as an example :</p>\r\n\r\n<p><img alt=\"Hello, World\" src=\"http://djangostars.com/blog/content/images/2016/10/2213.jpg\" /></p>\r\n\r\n<h2>Python. What is it used for?</h2>\r\n\r\n<p>Python is a general-purpose programming language. It&rsquo;s widely used in many fields. You may find the list of the most common spheres below:</p>\r\n\r\n<p><strong>Web development</strong></p>\r\n\r\n<p>Python can be used to build server-side web applications. There is a number of useful frameworks (such as Django, Flask, Pyramid) that were created to simplify your web development process and help you to do more with a fewer lines of code. Django is the most commonly used one nowadays.</p>\r\n\r\n<p><strong>Scientific and mathematical computing, machine learning</strong></p>\r\n\r\n<p>Python is being really attractive to data science community due to the strength of its core libraries (NumPy, SciPy, pandas, matplotlib) and high productivity for prototyping and building small and reusable systems.</p>\r\n\r\n<p><strong>System automation and administration</strong></p>\r\n\r\n<p>Python is widely used for system automation and administration. It has a number of libraries and tools to help such as Fabric, Salt, Psutil and others.</p>\r\n\r\n<p><strong>Security and penetration testing</strong></p>\r\n\r\n<p>Python is used by technologists to build custom tools to test their infrastructure. Scapy and Twill become great assistants there.</p>\r\n\r\n<p><strong>Scripting (general and application-specific)</strong></p>\r\n\r\n<p>Python is generally included by default in most Linux installations. It&rsquo;s also embedded into many popular 3rd party programs such as FreeCAD, Blender, Maya, Gimp and others.</p>\r\n\r\n<p><strong>Mapping and geography</strong></p>\r\n\r\n<p>Python is a scripting language incorporated into many GIS software applications such as ArcGis, QGis and others; yahoo maps were developed using python.</p>\r\n\r\n<p><strong>Automation of some routine tasks</strong></p>\r\n\r\n<p>You may always choose your own way and scope of tasks to be covered by Python. Here is a quick example :</p>\r\n\r\n<p><img alt=\"\" src=\"http://djangostars.com/blog/content/images/2016/10/python1.jpg\" /></p>\r\n\r\n<h2>Python. Big players</h2>\r\n\r\n<p>Huge companies used and still using Python to create and/or maintain their projects. You may find the list of examples below :</p>\r\n\r\n<p>Youtube</p>\r\n\r\n<p>Instagram</p>\r\n\r\n<p>Amazon</p>\r\n\r\n<p>Dropbox</p>\r\n\r\n<p>Google (various apps)</p>\r\n\r\n<p>Reddit</p>\r\n\r\n<p>Quora</p>\r\n\r\n<p>Pinterest</p>\r\n\r\n<p>Spotify</p>\r\n\r\n<p>Yahoo Maps</p>\r\n\r\n<p>Blender3D</p>\r\n\r\n<p>Many others</p>\r\n\r\n<h2>Python the good</h2>\r\n\r\n<p><img alt=\"fingerup\" src=\"http://djangostars.com/blog/content/images/2016/10/fingerup.jpg\" /></p>\r\n\r\n<p>Python is recommended for people making their first steps on the road of programming, while also widely spread among highly experienced developers. And that&rsquo;s for a reason.</p>\r\n\r\n<h6>Easy to learn, easy to read</h6>\r\n\r\n<p>It has low syntactic overhead. Code reads very much like English. Development process becomes faster.</p>\r\n\r\n<h6>Versatile, multi-purpose programming language</h6>\r\n\r\n<p>You can use python to do almost anything (analyse data, build websites, maintain servers, create games. This can be a neverending list.)</p>\r\n\r\n<h6>Lots of useful tools and libraries and frameworks</h6>\r\n\r\n<p>Depending on what field you wish to use Python for it provides you with a set of tools, frameworks and libraries to make your work more comfortable and efficient. You may follow the link: <a href=\"https://wiki.python.org/moin/UsefulModules\">https://wiki.python.org/moin/UsefulModules</a> to check the list of most commonly used ones.</p>\r\n\r\n<h6>Great documentation</h6>\r\n\r\n<p>There are tons of useful documentation available and a huge, friendly community standing behind Python. You won&rsquo;t be left face to face with the questions or problems appeared related to your code or other stuff.</p>\r\n\r\n<h2>Python the bad</h2>\r\n\r\n<p><img alt=\"fingerdown\" src=\"http://djangostars.com/blog/content/images/2016/10/fingerdown.jpg\" /></p>\r\n\r\n<p>No one is perfect. The Same rule can be used for Python. <strong>Sometimes</strong>, when you need high performance <strong>Python is just slow</strong>. It&rsquo;s not the best choice for memory intensive tasks or high-end programs that take a lot of CPU. Lower-level languages such as C or C++ should be able to cover such tasks in more efficient way, still that&rsquo;s like comparing a motorbike and a truck. Each of those covers the scope of its tasks, you can surely try to transfer 1000 bricks on your bike, but I wouldn&rsquo;t recommend you doing that.</p>\r\n\r\n<p>Community is constantly working on the performance improvements to be implemented. One of the examples here would be PyPy. It is a fast, compliant alternative implementation of the Python language.</p>\r\n\r\n<h2>Python. Applying for a job.</h2>\r\n\r\n<p>Companies such as Google, Yahoo!, Disney (and many others) all use Python. Once you&rsquo;ve brought your knowledge to a decent level &ndash; you shouldn&rsquo;t be worried much of the lack of job offers. Every year demand for the Python programmers grows up.</p>\r\n\r\n<p><img alt=\"graph\" src=\"http://djangostars.com/blog/content/images/2016/10/------.png\" /></p>\r\n\r\n<p><a href=\"http://www.itjobswatch.co.uk/\">source</a></p>\r\n\r\n<p>Just a <strong>little</strong> but very <strong>useful tip</strong> for those who are applying for a job:</p>\r\n\r\n<p>Due to the common complexity of the job descriptions (that do not always match the actual needs) and other factors you can face during and before the interview &ndash; the main question you should ask on the interview is: &rdquo;How would you describe a perfect candidate?&rdquo; As a result, you receive a clear and honest answer, cut all the conversations that are not related to the actual needs and install a small reminder about yourself into the employer&rsquo;s mind.</p>\r\n\r\n<h2>Python. The Future</h2>\r\n\r\n<p><img alt=\"Future\" src=\"http://djangostars.com/blog/content/images/2016/10/shutterstock_100318652.jpg\" /></p>\r\n\r\n<p>Python is constantly evolving. More and more companies are using it for a broader range of appliance from social networks, through automation to science calculations. It&#39;s an incredibly popular language and it&rsquo;s not going to die anytime soon. Community works hard on the improvements and from release to release more and more stuff is being covered. Where will Python bring us in the nearest future? There is no definite answer to that question and that&rsquo;s making me even more curious.</p>\r\n",
    "category": 4,
    "updated": "2016-10-26T08:44:39Z",
    "author": 1,
    "skills": [
      8
    ],
    "image": "blog/python-simplicity.jpg",
    "title": "Python ",
    "publish": "2016-10-25T21:14:58Z",
    "created": "2016-10-25T21:19:06Z",
    "layouts": 5,
    "status": "draft",
    "short_description": "My beloved prgrammng language",
    "slug": "python"
  },
  "model": "portfolio.post",
  "pk": 8
}
]
