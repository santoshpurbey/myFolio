[
{
  "fields": {
    "description": "<p>Wordpress Photo Album</p>\r\n",
    "end_date": "2013-11-05",
    "url": "http://be-there.gr",
    "image": "portfolio/port_bethere_fp2-1024x624.png",
    "layouts": 8,
    "skills": [
      5,
      2,
      1,
      6,
      4
    ],
    "job": "Web Development",
    "client": "Olibia Alevizopoulou",
    "short_description": "Online Photo Album",
    "slug": "bethere",
    "categories": 4,
    "name": "Bethere"
  },
  "model": "portfolio.project",
  "pk": 3
},
{
  "fields": {
    "description": "<p>Django Web Application for accounting services and balanvesheet hosting</p>\r\n",
    "end_date": "2015-03-09",
    "url": "http://e-logistiko.eu/",
    "image": "portfolio/e-logistiko.png",
    "layouts": 9,
    "skills": [
      5,
      7,
      2,
      8,
      6
    ],
    "job": "Django App",
    "client": "e-logistiko Accountin Services",
    "short_description": "Accounting Services",
    "slug": "e-logistiko",
    "categories": 5,
    "name": "e-logistiko "
  },
  "model": "portfolio.project",
  "pk": 4
},
{
  "fields": {
    "description": "<p>A dynamic and custom designed website using Django Web Framework</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://climaristotehniki.gr/",
    "image": "portfolio/Screenshot_from_2016-09-23_181119.png",
    "layouts": 8,
    "skills": [
      5,
      7,
      2,
      8,
      6
    ],
    "job": "Full Stack Development",
    "client": "Theodoros Remoundos",
    "short_description": "Company Website",
    "slug": "clima-aristotehniki",
    "categories": 2,
    "name": "Clima Aristotehniki"
  },
  "model": "portfolio.project",
  "pk": 5
},
{
  "fields": {
    "description": "<p>This&nbsp; blog is builded using Django Web Framiwork and Bootstrap 3 for its totaly custom design</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://theamateuravant-garde.com/",
    "image": "portfolio/avant.png",
    "layouts": 8,
    "skills": [
      5,
      11,
      7,
      9,
      2,
      8,
      6,
      10
    ],
    "job": "Full Stack Development",
    "client": "Elena Chatziathanasiou",
    "short_description": "Blog",
    "slug": "amature-avant-garde",
    "categories": 2,
    "name": "The Amature Avant Garde"
  },
  "model": "portfolio.project",
  "pk": 6
},
{
  "fields": {
    "description": "<p>Demo</p>\r\n",
    "end_date": "2015-12-02",
    "url": "",
    "image": "portfolio/ngsocial_V7VXttv.png",
    "layouts": 9,
    "skills": [
      13,
      12,
      9,
      6
    ],
    "job": "Front End Development",
    "client": "Demo Application",
    "short_description": "Angular Application",
    "slug": "ng-social-app",
    "categories": 3,
    "name": "NG Social App"
  },
  "model": "portfolio.project",
  "pk": 7
},
{
  "fields": {
    "description": "<p>A demo contact listin and storing&nbsp; Application using AngularJS and Firebase.</p>\r\n",
    "end_date": "2015-12-05",
    "url": "",
    "image": "portfolio/mycontacts-app.png",
    "layouts": 2,
    "skills": [
      13,
      11,
      12,
      9,
      6,
      10
    ],
    "job": "Front End Development",
    "client": "Demo Application",
    "short_description": "Angular App",
    "slug": "my-contacts",
    "categories": 3,
    "name": "My Contacts"
  },
  "model": "portfolio.project",
  "pk": 8
},
{
  "fields": {
    "description": "<p>Online Booking System</p>\r\n",
    "end_date": "2014-07-23",
    "url": "http://travelscouters.gr",
    "image": "portfolio/travel_NKqdZtQ.png",
    "layouts": 2,
    "skills": [
      5,
      11,
      9,
      2,
      1,
      6,
      4
    ],
    "job": "Full Stack",
    "client": "Travelscouters Team",
    "short_description": "Online Booking System",
    "slug": "travelscouters",
    "categories": 4,
    "name": "Travelscouters"
  },
  "model": "portfolio.project",
  "pk": 9
},
{
  "fields": {
    "description": "<p>Interrior Architect Personal Portfolio build with Django</p>\r\n",
    "end_date": "2016-06-03",
    "url": "http://echinarch.com",
    "image": "portfolio/echinarch.png",
    "layouts": 2,
    "skills": [
      5,
      11,
      7,
      9,
      2,
      8,
      6,
      10
    ],
    "job": "Full Stack",
    "client": "Elena Chatziathanasiou",
    "short_description": "Protfolio",
    "slug": "echinarch",
    "categories": 2,
    "name": "Echinarch "
  },
  "model": "portfolio.project",
  "pk": 10
},
{
  "fields": {
    "name": "PHP",
    "slug": "php"
  },
  "model": "portfolio.skill",
  "pk": 1
},
{
  "fields": {
    "name": "MySQL",
    "slug": "mysql"
  },
  "model": "portfolio.skill",
  "pk": 2
},
{
  "fields": {
    "name": "CmsMS",
    "slug": "cmsms"
  },
  "model": "portfolio.skill",
  "pk": 3
},
{
  "fields": {
    "name": "Wordpress",
    "slug": "wp"
  },
  "model": "portfolio.skill",
  "pk": 4
},
{
  "fields": {
    "name": "Bootstrap 3",
    "slug": "bootstrap3"
  },
  "model": "portfolio.skill",
  "pk": 5
},
{
  "fields": {
    "name": "Responsive",
    "slug": "responsive"
  },
  "model": "portfolio.skill",
  "pk": 6
},
{
  "fields": {
    "name": "Django",
    "slug": "django"
  },
  "model": "portfolio.skill",
  "pk": 7
},
{
  "fields": {
    "name": "Python",
    "slug": "python"
  },
  "model": "portfolio.skill",
  "pk": 8
},
{
  "fields": {
    "name": "HTML 5",
    "slug": "html5"
  },
  "model": "portfolio.skill",
  "pk": 9
},
{
  "fields": {
    "name": "SASS",
    "slug": "sass"
  },
  "model": "portfolio.skill",
  "pk": 10
},
{
  "fields": {
    "name": "CSS 3",
    "slug": "css3"
  },
  "model": "portfolio.skill",
  "pk": 11
},
{
  "fields": {
    "name": "Foundation Web Framework",
    "slug": "foundation"
  },
  "model": "portfolio.skill",
  "pk": 12
},
{
  "fields": {
    "name": "Angular JS",
    "slug": "angularjs"
  },
  "model": "portfolio.skill",
  "pk": 13
},
{
  "fields": {
    "name": "In Progress",
    "slug": "inprogress"
  },
  "model": "portfolio.category",
  "pk": 2
},
{
  "fields": {
    "name": "AngularJs",
    "slug": "angularjs"
  },
  "model": "portfolio.category",
  "pk": 3
},
{
  "fields": {
    "name": "Other",
    "slug": "other"
  },
  "model": "portfolio.category",
  "pk": 4
},
{
  "fields": {
    "name": "Django",
    "slug": "django"
  },
  "model": "portfolio.category",
  "pk": 5
},
{
  "fields": {
    "name": "Django Practices",
    "slug": "django-practices"
  },
  "model": "portfolio.category",
  "pk": 6
},
{
  "fields": {
    "name": "DevOps",
    "slug": "devops"
  },
  "model": "portfolio.category",
  "pk": 7
},
{
  "fields": {
    "name": "git",
    "slug": "git"
  },
  "model": "portfolio.category",
  "pk": 8
},
{
  "fields": {
    "name": "gallery",
    "slug": "gallery"
  },
  "model": "portfolio.postlayout",
  "pk": 1
},
{
  "fields": {
    "name": "large",
    "slug": "large"
  },
  "model": "portfolio.postlayout",
  "pk": 2
},
{
  "fields": {
    "name": "link",
    "slug": "link"
  },
  "model": "portfolio.postlayout",
  "pk": 3
},
{
  "fields": {
    "name": "quote",
    "slug": "quote"
  },
  "model": "portfolio.postlayout",
  "pk": 4
},
{
  "fields": {
    "name": "standard",
    "slug": "standard"
  },
  "model": "portfolio.postlayout",
  "pk": 5
},
{
  "fields": {
    "name": "video",
    "slug": "video"
  },
  "model": "portfolio.postlayout",
  "pk": 6
},
{
  "fields": {
    "name": "noimage",
    "slug": "noimage"
  },
  "model": "portfolio.postlayout",
  "pk": 7
},
{
  "fields": {
    "name": "standardright",
    "slug": "standardright"
  },
  "model": "portfolio.postlayout",
  "pk": 8
},
{
  "fields": {
    "name": "standardleft",
    "slug": "standardleft"
  },
  "model": "portfolio.postlayout",
  "pk": 9
},
{
  "fields": {
    "body": "<h2>Writing custom template tags</h2>\r\n\r\n<p><samp>Django custom template tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. The most common place to specify custom template tags is inside you Django app. The app should contain a <code>templatetags</code>&nbsp; directory (at the same level as models.py, views.py etc). If it does&#39;nt already exists you can create it manual.</samp></p>\r\n\r\n<p><samp>Your app layout should look like this:</samp></p>\r\n\r\n<p><code>appname/</code></p>\r\n\r\n<p><code>&nbsp; &nbsp; __init__.py</code></p>\r\n\r\n<p><code>&nbsp; &nbsp; models.py</code></p>\r\n\r\n<p><code>&nbsp; &nbsp;&nbsp;views.py</code></p>\r\n\r\n<p><code>&nbsp; &nbsp; templatetags/</code></p>\r\n\r\n<p><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;__init__.py</code></p>\r\n\r\n<p><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my_tags.py</code></p>\r\n\r\n<p><small>*Don&rsquo;t forget the <code>__init__.py</code> file to ensure the directory is treated as a Python package.</small></p>\r\n\r\n<p><samp>In the example above we &#39;re going to write&nbsp;an</samp>&nbsp;<code>inclusion_tag</code></p>\r\n\r\n<p><samp>This type is a common type o template tags that displays some data by rendering another template. In the example above we will write an <code>inclusion_tag </code>that helps us to render one part of the main&nbsp;menu within the <code>base</code> template.</samp></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><var>We are going to use the <code>inclusion_tag</code> library:</var></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>django.template.Library.inclusion_tag</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><var>Then we can write our script within the my_tags.py file. The code looks like this:</var></p>\r\n\r\n<p><code>from django import template<br />\r\nfrom portfolio.models import Page<br />\r\nregister = template.Library()</code></p>\r\n\r\n<p><code>@register.inclusion_tag(&#39;page/pages_menu.html&#39;)</code><br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<h3 style=\"color:#aaa; font-style:italic\">Now let&#39;s explain the above code line by line</h3>\r\n\r\n<p><code>from django import template</code></p>\r\n\r\n<p><code>register = template.Library()</code></p>\r\n\r\n<p><samp>To be a valid tag library, our script must contain a module-leve variable named <code>register, an instance o the template.Library</code>&nbsp;in witch all tags and fileters are register in Django.</samp></p>\r\n\r\n<p><code>from portfolio.models import Pag</code>e</p>\r\n\r\n<p><samp>Now this one is simple to explain.&nbsp;In this example we need to display data from the Page model so we need to import the Page model</samp></p>\r\n\r\n<p><code>@register.inclusion_tag(&#39;page/pages_menu.html&#39;)</code></p>\r\n\r\n<p><samp>Next we need to register the tamplate and at the end of our script comes our function, in this example our function is typical to a </samp><code>view.py </code><samp>function</samp>.</p>\r\n\r\n<p><code>def show_pages_menu(pages_menu):<br />\r\n&nbsp; &nbsp; pages_menu = Page.objects.all()<br />\r\n&nbsp; &nbsp; return { &#39;pages_menu&#39; : pages_menu }</code></p>\r\n\r\n<p><samp>At this </samp>point we&#39;ve <samp>just finished with the banckend an all we need is to show the results in our template:</samp></p>\r\n\r\n<p><code>{% show_pages_menu pages_menu %}</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><samp>This was just an example of using Custom Teamplate Tags in Django, you can visit <a href=\"https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/#inclusion-tags\">Django&#39;s Documentaion</a> page to find out more variations of using &nbsp;template tags.&nbsp;</samp></p>\r\n\r\n<hr />\r\n<p><small>Sources:<a href=\"https://docs.djangoproject.com/en/1.9/howto/custom-template-tags\"> Django Project</a></small></p>\r\n",
    "category": 6,
    "updated": "2016-09-27T11:29:01.333Z",
    "author": 1,
    "image": "blog/hqdefault.png",
    "title": "Create custom Template Tags in Django",
    "publish": "2016-06-03T16:08:23Z",
    "created": "2016-06-03T16:08:58Z",
    "layouts": 4,
    "status": "published",
    "short_description": "Django custom template tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. Here is a laconic overview of how we create a custom tag in Django",
    "slug": "create-custom-template-tags-django"
  },
  "model": "portfolio.post",
  "pk": 1
},
{
  "fields": {
    "body": "<p><samp><strong>Django&nbsp;is a&nbsp;very&nbsp;popular, efficient, adjustable and dynamically evolving framework for web applications. When Django initially gained popularity the recommended server setup for running applications was based around Apache with mod_wsgi. This&nbsp;days&nbsp;the art of running Django advanced and the configuration is more productive and resilient, but also&nbsp;more complex including&nbsp;such tools as Nginx, Gunicorn and Supservisor.</strong></samp></p>\r\n\r\n<p><strong><samp>While I was trying to deploy my first Django application to a production server I realized that it was not such a piece of cake especially for someone who is not an IT specialist . So I had to do an intensive research to collect information in pieces and the make a puzzle of steps witch I need to follow to complete the process of deploying.</samp></strong></p>\r\n\r\n<p><strong><samp>In this article I am going to share with you how to combine all of&nbsp;this components&nbsp;into a Django server running on Linux.<br />\r\nRequirements<br />\r\nA sever available with root privileges<br />\r\nDNS configured to point at the server&#39;s IP<br />\r\nI am using a server running Ubuntu 14.04 so everything should also work on any Debian-based Distribution.<br />\r\nSystem update<br />\r\nLet&#39;s&nbsp;get&nbsp;started&nbsp;by making sure our system is up to da</samp></strong>te</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get update</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get upgrade</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>MySql</h2>\r\n\r\n<p><strong><samp>MySql is a popular database management system used for web and server applications</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>sudo apt-get install mysql-server</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><samp>During the installation&nbsp;process you&nbsp;will prompted to choose and set a password for&nbsp;MySql root user. Choose a strong one and keep it in a safe place for future&nbsp;referencies.</samp></strong></p>\r\n\r\n<h2>Application System User</h2>\r\n\r\n<p><strong><samp>Web applications&nbsp;can become compromised even though Django has a pretty good security track record. As a good practice for security is to run the application as&nbsp;system user&nbsp;with limited privileges. If the application has limited access to resources on your server,&nbsp;potential damage can also be limited.</samp></strong></p>\r\n\r\n<p><br />\r\n<strong><samp>Create a system&nbsp;user&nbsp;for your application,&nbsp;myappuser&nbsp;and assign it to a group called&nbsp;webapps</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo groupadd --system webapps</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo useradd --system --gid webapps --shell /bin/bash &ndash;home /www/myapp_django myappuser</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Install virtualenv and create an environment for your app</h2>\r\n\r\n<p><strong><samp>Virtualenv&nbsp;is a powerful tool&nbsp;which&nbsp;allows you to create separate Python environments in your system. We need&nbsp;virtual environment&nbsp;to run application with different sets of requirements concurrently.Virtualenv&nbsp;is easy to install on Ubuntu:</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo apt-get install python-virtualenv</code></div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3 style=\"color:#aaa; font-style:italic\"><strong>Create and activate an environment for your application</strong></h3>\r\n\r\n<p><strong><samp>I usually keep all may web application in a</samp>&nbsp; <code>/www/</code> <samp>directory.&nbsp; Create a diractory to store you application like </samp><code>/www/myapp_django</code> <samp>and change the owner of this diractory to your application user <code>myappuser</code>.</samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo mkdir -p /www/myapp_django</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo chown myapp_user /www/myapp_django</code></div>\r\n\r\n<p><strong>Then as the application user myapp_user create a virtual Python environment in the application directory /www/myapp_django:</strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>$ sudo su - myapp_user</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>myapp_user@ghost:~$ cd /www/myapp_django</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>myapp_user@ghost:~$ virtualenv myappenv</code></div>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">\r\n<pre>\r\n<code>New python executable in myapp_django/bin/python\r\nInstalling distribute..............done.\r\nInstalling pip.....................done.</code></pre>\r\n\r\n<p><code>myapp_user@ghost:~$ source myappenv/bin/activate</code></p>\r\n\r\n<p><code>(myappenv)myapp_user@ghost:~$ </code></p>\r\n</div>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong><samp>Your environment is now activated and you can proceed to install your application requirements.</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ pip install django</code>\r\n\r\n<pre>\r\n<code>Downloading/unpacking django\r\n(...)\r\nInstalling collected packages: django\r\n(...)\r\nSuccessfully installed django\r\nCleaning up...</code></pre>\r\n</div>\r\n\r\n<p><strong><samp>&nbsp;Your environment with Django should now be ready to use. Go ahead and create a Django project</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ django-admin.py startproject myproject</code></div>\r\n\r\n<p><strong><samp>Test your new project by running the development server</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ ./manage.py runserver example.com:8000 </code>\r\n\r\n<pre>\r\n<code>Validating models...\r\n\r\n0 errors found\r\nJune 09, 2013 - 06:12:00\r\nDjango version 1.5.1, using settings &#39;hello.settings&#39;\r\nDevelopment server is running at http://example.com:8000/\r\nQuit the server with CONTROL-C.\r\n</code></pre>\r\n</div>\r\n\r\n<p><strong><samp>&nbsp;You should now be able to access your development server from <a href=\"http://example.com:8000\">http://example.com:8000</a></samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"color:#aaa; font-style:italic\"><strong>Allowing other users to have write access to your application directory</strong></h3>\r\n\r\n<p><strong><samp>Your application is properly configured to run as user </samp><code>myapp_user, who owns the entire application directory. If you want reqular users to have write access to application files you can set properly the group owner and give the group write permitions.</code></strong></p>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h1><strong>Gunicorn</strong></h1>\r\n\r\n<p><strong>In production we&#39;re going to use a dedicated application server called <a href=\"http://gunicorn.org\">Gunicorn</a></strong></p>\r\n\r\n<p><strong>First you&#39;ll have to install Gunicorn in your applications virtualenv:</strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$</code><code> pip install gunicorn</code>\r\n\r\n<pre>\r\n<code>Downloading/unpacking gunicorn\r\n  Downloading gunicorn-0.17.4.tar.gz (372Kb): 372Kb downloaded\r\n  Running setup.py egg_info for package gunicorn\r\n\r\nInstalling collected packages: gunicorn\r\n  Running setup.py install for gunicorn\r\n\r\n    Installing gunicorn_paster script to /webapps/hello_django/bin\r\n    Installing gunicorn script to /webapps/hello_django/bin\r\n    Installing gunicorn_django script to /webapps/hello_django/bin\r\nSuccessfully installed gunicorn\r\nCleaning up...\r\n</code></pre>\r\n</div>\r\n\r\n<p><br />\r\n<strong><samp>Now that you have installed Gunicorn you can test wether it can server your Django application by running the following command<code>:</code></samp></strong></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><code>(myappenv)myapp_user@ghost:~$ gunicorn myproject.wsgi:application --bind example.com:8001</code><code> </code></div>\r\n\r\n<p><strong><samp>You should now be able to access the Gunicorn server from <a href=\"http://example.com:8001\">http://example.com:8001</a> . I intentionally changed port 8000 to 8001 to force your browser to establish a new connection.</samp></strong></p>\r\n\r\n<p><strong><samp>Gunicorn is installed and ready to serve your app. Let&rsquo;s set some configuration options to make it more useful. I like to set a number of parameters, so let&rsquo;s put them all into a small BASH script, which I save as <code>bin/gunicorn_start</code></samp></strong></p>\r\n\r\n<h2 style=\"font-style:italic\"><span class=\"marker\">gunicorn_start img</span></h2>\r\n\r\n<p><strong><samp>Set the executable bit on the <code>gunicorn_start</code> script:</samp></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ sudo chmod u+x bin/gunicorn_start</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 7,
    "updated": "2016-09-27T11:28:19.032Z",
    "author": 1,
    "image": "blog/acf-custom-faq-page-300x194.jpg",
    "title": "Setting up Django with ngnx, gunicorn, virtualenv, supervisor and MySql ",
    "publish": "2016-06-05T08:00:56Z",
    "created": "2016-06-05T08:01:14Z",
    "layouts": 2,
    "status": "published",
    "short_description": "his days the art of running Django advanced  and the configuration is more productive and resilient, but also  more complex including such tools as Nginx, Gunicorn and Supservisor.",
    "slug": "setting-django-ngnx-gunicorn-virtualenv-supoervisor-and-mysql"
  },
  "model": "portfolio.post",
  "pk": 2
},
{
  "fields": {
    "body": "<p>Nginx makes a great server for your Gunicorn-powered Django applications. In this article I will demonstrate how you can run multiple Django applications on the same Nginx server, hosting sites on two different domains. Each application will be set up in its own Virtualenv and each will be owned by and run as a different user to limit consequences of a potential security breach.</p>\r\n\r\n<h3>Prerequisites</h3>\r\n\r\n<p>This artcle is a continuation of <a href=\"http://kkabardi.me/post/2/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">a previous article on setting up Django with Nginx and Gunicorn</a>. You should start by following instructions in <a href=\"http://kkabardi.me/post/2/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">that article</a> and prepare a server with the following components:</p>\r\n\r\n<p>Nginx</p>\r\n\r\n<p>PostgreSQL</p>\r\n\r\n<p>Virtualenv</p>\r\n\r\n<p>Supervisor</p>\r\n\r\n<p>Our goal in this article will be to create two applications, one called Hello and one called Goodbye. The former will be served under the address <a href=\"http://hello.test\">http://hello.test</a> and the latter <a href=\"http://goodbye.test\">http://goodbye.test</a></p>\r\n\r\n<h3>Create a virtual environment for each app</h3>\r\n\r\n<p>In order to keep your apps independent, each will run in its own virtual environment. Create an environment for each application using the <code>virtualenv</code> command. In each environment install Django, Gunicorn, the application itself and its other dependencies. Follow steps described in <a href=\"http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/\" title=\"Setting up Django with Nginx, Gunicorn, virtualenv, supervisor and PostgreSQL\">my previous article</a> for each app.</p>\r\n\r\n<p>Let&rsquo;s say that for our <code>hello</code> and <code>goodbye</code> applications we would create environments in <code>/webapps/hello_django</code> and <code>/webapps/goodbye_django</code> respectively. We would get a directory structure containing the following entries:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>/webapps/\r\n\u251c\u2500\u2500 hello_django                &lt;= virtualenv for the application Hello\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 bin\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 activate\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn            &lt;= Hello app&#39;s gunicorn\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn_start      &lt;= Hello app&#39;s gunicorn start script\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u2514\u2500\u2500 python\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 hello                   &lt;= Hello app&#39;s Django project directory\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp; \u2514\u2500\u2500 hello\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp;     \u251c\u2500\u2500 settings.py     &lt;= hello.settings\r\n\u2502&nbsp;&nbsp; \u2502&nbsp;&nbsp;     \u2514\u2500\u2500 wsgi.py         &lt;= hello.wsgi\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 logs                    &lt;= Hello app&#39;s logs will be saved here\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 media\r\n\u2502&nbsp;&nbsp; \u251c\u2500\u2500 run                     &lt;= Gunicorn&#39;s socket file will be placed here\r\n\u2502&nbsp;&nbsp; \u2514\u2500\u2500 static\r\n\u2514\u2500\u2500 goodbye_django              &lt;= analogous virtualenv for the app Goodbye\r\n    \u251c\u2500\u2500 bin\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 activate\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn\r\n    \u2502&nbsp;&nbsp; \u251c\u2500\u2500 gunicorn_start\r\n    \u2502&nbsp;&nbsp; \u2514\u2500\u2500 python\r\n    \u251c\u2500\u2500 goodbye\r\n    \u2502&nbsp;&nbsp; \u2514\u2500\u2500 goodbye\r\n    \u2502&nbsp;&nbsp;     \u251c\u2500\u2500 settings.py\r\n    \u2502&nbsp;&nbsp;     \u2514\u2500\u2500 wsgi.py\r\n    \u251c\u2500\u2500 logs\r\n    \u251c\u2500\u2500 media\r\n    \u251c\u2500\u2500 run\r\n    \u2514\u2500\u2500 static\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create system accounts for the webapps</h3>\r\n\r\n<p>Even though Django has a pretty good <a href=\"http://django.readthedocs.org/en/latest/releases/security.html\" title=\"Archive of Django security issues\">security track record</a>, web applications can become compromised. In order to make running multiple applications safer we&rsquo;ll create a separate system user account for each application. The apps will run on our system with the privileges of those special users. Even if one application became compromised, an attacker would only be able to take over the part of your system available to the hacked application.</p>\r\n\r\n<p>Create system users named <code>hello</code> and <code>goodbye</code> and assign them to a system group called <code>webapps</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><code>$ sudo groupadd --system webapps<br />\r\n$ sudo useradd --system --gid webapps --home /webapps/hello_django hello<br />\r\n$ sudo useradd --system --gid webapps --home /webapps/goodbye_django goodbye </code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now change the owner of files in each application&rsquo;s folder. I like to assign the group <code>users</code> as the owner, because that allows regular users of the server to access and modify parts of the application which are group-writable. This is optional.</p>\r\n\r\n<pre>\r\n<code>$ sudo chown -R hello:users /webapps/hello_django\r\n$ sudo chown -R goodbye:users /webapps/goodbye_django\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Gunicorn start scripts</h3>\r\n\r\n<p>For each application create a simple shell script based on my <a href=\"https://gist.github.com/postrational/5747293#file-gunicorn_start-bash\" title=\"gunicorn_start.bash\">gunicorn_start</a> template. The scripts differ only in the values of variables which they set.</p>\r\n\r\n<p>For the Hello app, set the following values in <code>/webapps/hello_django/bin/gunicorn_start</code>:</p>\r\n\r\n<p>/webapps/hello_django/bin/gunicorn_start</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>(...)\r\nNAME=&quot;hello_app&quot;                                  # Name of the application\r\nDJANGODIR=/webapps/hello_django/hello             # Django project directory\r\nSOCKFILE=/webapps/hello_django/run/gunicorn.sock  # we will communicte using this unix socket\r\nUSER=hello                                        # the user to run as\r\nGROUP=webapps                                     # the group to run as\r\nNUM_WORKERS=3                                     # how many worker processes should Gunicorn spawn\r\nDJANGO_SETTINGS_MODULE=hello.settings             # which settings file should Django use\r\nDJANGO_WSGI_MODULE=hello.wsgi                     # WSGI module name\r\n(...)\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>And for the Goodbye app by analogy:</p>\r\n\r\n<p>/webapps/goodbye_django/bin/gunicorn_start</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>(...)\r\nNAME=&quot;goodbye_app&quot;                                  # Name of the application\r\nDJANGODIR=/webapps/goodbye_django/goodbye           # Django project directory\r\nSOCKFILE=/webapps/goodbye_django/run/gunicorn.sock  # we will communicte using this unix socket\r\nUSER=goodbye                                        # the user to run as\r\nGROUP=webapps                                       # the group to run as\r\nNUM_WORKERS=3                                       # how many worker processes should Gunicorn spawn\r\nDJANGO_SETTINGS_MODULE=goodbye.settings             # which settings file should Django use\r\nDJANGO_WSGI_MODULE=goodbye.wsgi                     # WSGI module name\r\n(...)\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Supervisor configuration files and start the apps</h3>\r\n\r\n<p>Next, create a Supervisor configuration for each application. Add a file for each app to the <code>/etc/supervisor/conf.d</code> directory.</p>\r\n\r\n<p>One for Hello:</p>\r\n\r\n<p>/etc/supervisor/conf.d/hello.conf</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>[program:hello]\r\ncommand = /webapps/hello_django/bin/gunicorn_start                    ; Command to start app\r\nuser = hello                                                          ; User to run as\r\nstdout_logfile = /webapps/hello_django/logs/gunicorn_supervisor.log   ; Where to write log messages\r\nredirect_stderr = true                                                ; Save stderr in the same log\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>And one for Goodbye:</p>\r\n\r\n<p>/etc/supervisor/conf.d/goodbye.conf</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>[program:goodbye]\r\ncommand = /webapps/goodbye_django/bin/gunicorn_start                    ; Command to start app\r\nuser = goodbye                                                          ; User to run as\r\nstdout_logfile = /webapps/goodbye_django/logs/gunicorn_supervisor.log   ; Where to write log messages\r\nredirect_stderr = true                                                  ; Save stderr in the same log\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Reread the configuration files and update Supervisor to start the apps:</p>\r\n\r\n<pre>\r\n<code>$ sudo supervisorctl reread\r\n$ sudo supervisorctl update\r\n</code></pre>\r\n\r\n<p>You can also start them manually, if you prefer:</p>\r\n\r\n<pre>\r\n<code>$ sudo supervisorctl start hello\r\n$ sudo supervisorctl start goodbye\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Create Nginx virtual servers</h3>\r\n\r\n<p>Finally we can create virtual server configurations for each app based on <a href=\"https://gist.github.com/postrational/5747293#file-hello-nginxconf\" title=\"Nginx virtual server configuration template\">this template</a>. These will be stored in <code>/etc/nginx/sites-available</code> and then activated by links in <code>/etc/nginx/sites-enabled</code>.</p>\r\n\r\n<p>/etc/nginx/sites-available/hello</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>upstream hello_app_server {\r\n  server unix:/webapps/hello_django/run/gunicorn.sock fail_timeout=0;\r\n}\r\n\r\nserver {\r\n    listen   80;\r\n    server_name hello.test;\r\n\r\n    client_max_body_size 4G;\r\n\r\n    access_log /webapps/hello_django/logs/nginx-access.log;\r\n    error_log /webapps/hello_django/logs/nginx-error.log;\r\n\r\n    location /static/ {\r\n        alias   /webapps/hello_django/static/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias   /webapps/hello_django/media/;\r\n    }\r\n\r\n    location / {\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        if (!-f $request_filename) {\r\n            proxy_pass http://hello_app_server;\r\n            break;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>/etc/nginx/sites-available/goodbye</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>upstream goodbye_app_server {\r\n  server unix:/webapps/goodbye_django/run/gunicorn.sock fail_timeout=0;\r\n}\r\n\r\nserver {\r\n    listen   80;\r\n    server_name goodbye.test;\r\n\r\n    client_max_body_size 4G;\r\n\r\n    access_log /webapps/goodbye_django/logs/nginx-access.log;\r\n    error_log /webapps/goodbye_django/logs/nginx-error.log;\r\n\r\n    location /static/ {\r\n        alias   /webapps/goodbye_django/static/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias   /webapps/goodbye_django/media/;\r\n    }\r\n\r\n    location / {\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        if (!-f $request_filename) {\r\n            proxy_pass http://goodbye_app_server;\r\n            break;\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Enable the virtual servers and restart Nginx:</p>\r\n\r\n<pre>\r\n<code>$ sudo ln -s /etc/nginx/sites-available/hello /etc/nginx/sites-enabled/hello\r\n$ sudo ln -s /etc/nginx/sites-available/goodbye /etc/nginx/sites-enabled/goodbye\r\n$ sudo service nginx restart\r\n</code></pre>\r\n\r\n<h3>Test the virtual servers</h3>\r\n\r\n<p>Now let&rsquo;s point each domain to our server for testing purposes. Making actual changes to the Domain Name System is usually among the final steps when working in production, performed after all tests are completed. For testing you can simulate the DNS changes by adding an entry to the <code>/etc/hosts</code> file of a computer from which you will be connecting to your server (your laptop for example).</p>\r\n\r\n<p>Say you want to serve Django applications under the domains <code>hello.test</code> and <code>goodbye.test</code> from a server with the IP address of <code>10.10.10.200</code>. You can simulate the appropriate DNS entries locally on your PC by putting the following line into your <code>/etc/hosts</code> file. On Windows the file is <a href=\"http://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system\" title=\"hosts (file) Location in the file system - Wikipedia\">conveniently hidden</a> in <code>%SystemRoot%\\system32\\drivers\\etc\\hosts</code>.</p>\r\n\r\n<p>/etc/hosts</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n1\r\n2\r\n</pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>(...)\r\n10.10.10.200    hello.test goodbye.test\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>You can now navigate to each domain from your PC to test that each app on the server is working correctly:</p>\r\n\r\n<p><a href=\"http://hello.test\">http://hello.test</a></p>\r\n\r\n<p><a href=\"http://goodbye.test\">http://goodbye.test</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 7,
    "updated": "2016-09-27T11:28:46.918Z",
    "author": 1,
    "image": "blog/pyter.gif",
    "title": "Serving multiple Django applications with Nginx and Gunicorn",
    "publish": "2016-07-13T07:18:21Z",
    "created": "2016-07-13T07:18:39Z",
    "layouts": 5,
    "status": "published",
    "short_description": "Nginx makes a great server for your Gunicorn-powered Django applications. In this article I will demonstrate how you can run multiple Django applications on the same Nginx server, hosting sites on two different domains.",
    "slug": "serving-multiple-django-applications-nginx-and-gunicorn"
  },
  "model": "portfolio.post",
  "pk": 3
},
{
  "fields": {
    "body": "<h2><samp>Here is today&#39;s obscure error message and its solutions.</samp></h2>\r\n\r\n<p><samp>Say you are working on a Django project, using its development web server, and you get this exception when you try to load a page in the browser:</samp></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><tt>AttributeError: &#39;str&#39; object has no attribute &#39;resolve&#39;</tt></div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>1. Missed&nbsp; &#39;pattern&#39; keyword&#39;:</h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = (&#39;&#39;,<br />\r\n(r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n# ...</div>\r\n\r\n<p>this should be changed to:</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = patterns(&#39;&#39;,<br />\r\n(r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n# ...</div>\r\n\r\n<p>Note that in Django 1.8+, it&#39;s better to use a list of regexes instead of <code>patterns</code>.</p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">urlpatterns = [<br />\r\n&nbsp;&nbsp;&nbsp; (r&#39;^$&#39;, direct_to_template, {&#39;template&#39; : &#39;a.html&#39;}),<br />\r\n&nbsp;&nbsp;&nbsp; ...<br />\r\n]</div>\r\n\r\n<p><samp>See the difference? In the first one, I&#39;m incorrectly assigning urlpatterns to be a tuple. In the second, I&#39;m correctly using the <code>django.conf.urls.defaults.patterns</code> function.</samp></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>2. Miessed</samp> comma in some tuple, like:</h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^hello/$&#39; &#39;views.whatever&#39;)&nbsp;</div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>3. Commented out some url()s using triple-quotes</samp></h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\"><br />\r\nurlpatterns = patterns(&#39;&#39;,<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^admin/&#39;, include(admin.site.urls)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^cart/&#39;, include(&#39;cart.urls&#39;, namespace=&#39;cart&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^payment/&#39;, include(&#39;payment.urls&#39;, namespace=&#39;payment&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^orders/&#39;, include(&#39;orders.urls&#39;, namespace=&#39;orders&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^paypal/&#39;, include(&#39;paypal.standard.ipn.urls&#39;)),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^&#39;, include(&#39;shop.urls&#39;, namespace=&#39;shop&#39;)),<br />\r\n&quot;&quot;&quot;<br />\r\n&nbsp;&nbsp;&nbsp; start REST urls<br />\r\n&nbsp;&nbsp;&nbsp; url(&#39;^.*$&#39;, IndexView.as_view(), name=&#39;index&#39;),<br />\r\n&nbsp;&nbsp;&nbsp; url(r&#39;^api/v1/&#39;, include(router.urls)),<br />\r\n&nbsp;&nbsp;&nbsp; end REST urls<br />\r\n&quot;&quot;&quot;</div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><samp>4. Carelessly leaved closing bracket in the wrong place:</samp></h3>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^(?P\\d{4})/$&#39;, &#39;archive_year&#39;, entry_info_dict), &#39;coltrane_entry_archive_year&#39;,</div>\r\n\r\n<p><samp>instead of:</samp></p>\r\n\r\n<div style=\"background:#eee; border:1px solid #ccc; padding:5px 10px\">(r&#39;^(?P\\d{4})/$&#39;, &#39;archive_year&#39;, entry_info_dict, &#39;coltrane_entry_archive_year&#39;),</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><samp>5.<code> </code><code>ROOT_URLCONF</code> set to be a list</samp></h3>\r\n\r\n<p>&nbsp;</p>\r\n",
    "category": 5,
    "updated": "2016-09-27T11:37:40.928Z",
    "author": 1,
    "image": "blog/django-1040x585.png",
    "title": "Django: AttributeError: 'str' object has no attribute 'resolve'",
    "publish": "2016-07-20T08:35:02Z",
    "created": "2016-07-20T08:35:31Z",
    "layouts": 3,
    "status": "published",
    "short_description": "Say you are working on a Django project, using its development web server, and you get this exception when you try to load a page in the browser:",
    "slug": "django-attributeerror-str-object-has-no-attribute-resolve"
  },
  "model": "portfolio.post",
  "pk": 4
},
{
  "fields": {
    "body": "<p><code>$ git rebase --interactive commit_hash^</code></p>\r\n\r\n<p>each <code>^</code> indicates how many commits you want to edit, if it&#39;s only one (the commit hash that you specified), then you just add one <code>^</code>.</p>\r\n\r\n<p>Using Vim you change the words <strong><code>pick</code></strong> to <strong><code>reword</code></strong> for the commits you want to change, save and quit(<code>:wq</code>). Then git will prompt you with each commit that you marked as reword so you can change the commit message.</p>\r\n\r\n<p>Each commit message you have to save and quit(<code>:wq</code>) to go to the next commit message</p>\r\n\r\n<p>EDIT: to navigate in <code>vim</code> you use <code>j</code> to go up, <code>k</code> to go down, <code>h</code> to go left, and <code>l</code> to go right( all this in <code>NORMAL</code> mode, press <code>ESC</code> to go to <code>NORMAL</code> mode ). To edit a text, press <code>i</code> so that you enter the <code>INSERT</code> mode, where you insert text. Press <code>ESC</code> to go back to <code>NORMAL</code> mode :)</p>\r\n\r\n<p>What <code>git push --force</code> does is overwrite the remotes commits with your local commits.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>http://stackoverflow.com/questions/1186535/how-to-modify-a-specified-commit-in-git/31192762#31192762</p>\r\n",
    "category": 8,
    "updated": "2016-09-27T11:28:02.684Z",
    "author": 1,
    "image": "blog/git-rebase.png",
    "title": "How to modify a specified commit in git",
    "publish": "2016-09-15T12:04:24Z",
    "created": "2016-09-15T12:14:36Z",
    "layouts": 5,
    "status": "published",
    "short_description": "this is a test",
    "slug": "how-modify-specified-commit-git"
  },
  "model": "portfolio.post",
  "pk": 5
},
{
  "fields": {
    "body": "asdf",
    "updated": "2016-06-05T08:10:03Z",
    "name": "Tets",
    "created": "2016-06-05T08:10:03Z",
    "active": true,
    "post": 2,
    "email": "kabardi.cat@gmail.com"
  },
  "model": "portfolio.comment",
  "pk": 1
},
{
  "fields": {
    "body": "asdf",
    "updated": "2016-06-05T08:39:44Z",
    "name": "Tets",
    "created": "2016-06-05T08:39:44Z",
    "active": true,
    "post": 2,
    "email": "kabardi.cat@gmail.com"
  },
  "model": "portfolio.comment",
  "pk": 2
}
]
